{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Banugopan\\\\Desktop\\\\Proshop\\\\frontend\\\\src\\\\screens\\\\UserEditScreen.js\",\n    _s = $RefreshSig$();\n\n// import React, {useState, useEffect} from 'react'\n// import { Link } from 'react-router-dom'\n// import { Form, Button} from 'react-bootstrap'\n// import FormContainer from '../components/FormContainer'\n// import { useDispatch, useSelector} from 'react-redux'\n// import Message from '../components/Message'\n// import Loader from '../components/Loader'\n// import { getUserDetails } from '../actions/userActions'\n// const UserEditScreen = ({ match, history }) => {\n// const userId = match.params.id\n//  const [name, setName] = useState('')\n//  const [email, setEmail] = useState('')\n//  const [isAdmin, setIsAdmin] = useState(false)\n// const dispatch = useDispatch()\n//  const userDetails = useSelector(state => state.userDetails)\n//  const { loading, error, user} = userDetails\n// // useEffect(() => {\n// //        if(!user.name || user._id !== userId) {\n// //            dispatch(getUserDetails(userId))\n// //        } else {\n// //            setName(user.name)\n// //            setEmail(user.email)\n// //            setIsAdmin(user.isAdmin)\n// //        }\n// //    },[dispatch, user, userId])\n//  const submitHandler = (e) => {\n//      e.preventDefault()\n//  }\n//  return (\n//         <>\n//         <Link to='/admin/userlist' className='btn btn-light my-3'>\n//             Go Back\n//         </Link>\n//         <FormContainer>\n//             <h1>Edit User</h1>\n//             { loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message> : (\n//              <Form onSubmit={submitHandler}>\n//               <Form.Group controlId='name'>\n//                     <Form.Label>Name</Form.Label>\n//                     <Form.Control type='name' placeholder='Enter name'\n//                     value={name}\n//                     onChange={(e) => setName(e.target.value)}></Form.Control>\n//                 </Form.Group>\n//                 <Form.Group controlId='email'>\n//                     <Form.Label>Email Address</Form.Label>\n//                     <Form.Control type='email' placeholder='Enter email'\n//                     value={email}\n//                     onChange={(e) => setEmail(e.target.value)}></Form.Control>\n//                 </Form.Group>\n//                  <Form.Group controlId='isadmin'>\n//                     <Form.Check type='checkbox' label='Is Admin'\n//                     checked={isAdmin}\n//                     onChange={(e) => setIsAdmin(e.target.checked)}></Form.Check>\n//                 </Form.Group>\n//                 <Button type='submit' variant='primary'>\n//                     Update\n//                 </Button>\n//              </Form>\n//             )}\n//             </FormContainer>\n//             </>\n//     )  \n// }\n// export default UserEditScreen\nimport React, { useState, useEffect } from 'react';\nimport { Table, Form, Button, Col, Row } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { getUserDetails, updateUserProfile } from '../actions/userActions';\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants';\nimport { listmyOrders } from '../actions/orderActions';\n\nconst ProfileScreen = ({\n  location,\n  history\n}) => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState(null);\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  console.log(userDetails);\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/login');\n    } else {\n      if (!user || !user.name || success) {\n        dispatch({\n          type: USER_UPDATE_PROFILE_RESET\n        });\n        dispatch(getUserDetails('profile'));\n        dispatch(listmyOrders());\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n      }\n    }\n  }, [dispatch, history]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      md: 3,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeholder: \"Enter name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"password\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"Enter password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"confirmpassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"Confirm password\",\n            value: confirmPassword,\n            onChange: e => setConfirmPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProfileScreen, \"SIcxDmpB/UOn5AIaVDu6OmJE+Y8=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ProfileScreen;\nexport default ProfileScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileScreen\");","map":{"version":3,"sources":["C:/Users/Banugopan/Desktop/Proshop/frontend/src/screens/UserEditScreen.js"],"names":["React","useState","useEffect","Table","Form","Button","Col","Row","LinkContainer","useDispatch","useSelector","Message","Loader","getUserDetails","updateUserProfile","USER_UPDATE_PROFILE_RESET","listmyOrders","ProfileScreen","location","history","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","dispatch","userDetails","state","loading","error","user","console","log","userLogin","userInfo","push","success","type","submitHandler","e","preventDefault","target","value"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,GAAnC,QAA6C,iBAA7C;AACA,SAAQC,aAAR,QAA4B,wBAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAwC,aAAxC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,wBAAlD;AACA,SAASC,yBAAT,QAA0C,4BAA1C;AACA,SAASC,YAAT,QAA6B,yBAA7B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA2B;AAAA;;AAChD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACuB,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACyB,eAAD,EAAkBC,kBAAlB,IAAwC1B,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAAC2B,OAAD,EAAUC,UAAV,IAAwB5B,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAM6B,QAAQ,GAAGrB,WAAW,EAA5B;AAEA,QAAMsB,WAAW,GAAGrB,WAAW,CAACsB,KAAK,IAAIA,KAAK,CAACD,WAAhB,CAA/B;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA0BJ,WAAhC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AAEC,QAAMO,SAAS,GAAG5B,WAAW,CAACsB,KAAK,IAAIA,KAAK,CAACM,SAAhB,CAA7B;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAeD,SAArB;AAGApC,EAAAA,SAAS,CAAC,MAAM;AACb,QAAG,CAACqC,QAAJ,EAAc;AACVpB,MAAAA,OAAO,CAACqB,IAAR,CAAa,QAAb;AACH,KAFD,MAEM;AACF,UAAG,CAACL,IAAD,IAAS,CAACA,IAAI,CAACf,IAAf,IAAuBqB,OAA1B,EAAmC;AAC/BX,QAAAA,QAAQ,CAAC;AACLY,UAAAA,IAAI,EAAE3B;AADD,SAAD,CAAR;AAGAe,QAAAA,QAAQ,CAACjB,cAAc,CAAC,SAAD,CAAf,CAAR;AACAiB,QAAAA,QAAQ,CAACd,YAAY,EAAb,CAAR;AACH,OAND,MAMO;AACHK,QAAAA,OAAO,CAACc,IAAI,CAACf,IAAN,CAAP;AACAG,QAAAA,QAAQ,CAACY,IAAI,CAACb,KAAN,CAAR;AACH;AACJ;AACJ,GAfS,EAeP,CAACQ,QAAD,EAAWX,OAAX,CAfO,CAAT;;AAiBA,QAAMwB,aAAa,GAAIC,CAAD,IAAO;AACzBA,IAAAA,CAAC,CAACC,cAAF;AAEH,GAHD;;AAKG,sBACI,QAAC,GAAD;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA,8BAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,EAICZ,OAAO,iBAAI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAJZ,eAKC,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEU,aAAhB;AAAA,gCACC,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,MAAtB;AAAA,kCACM,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADN,eAEM,QAAC,IAAD,CAAM,OAAN;AAAc,YAAA,IAAI,EAAC,MAAnB;AAA0B,YAAA,WAAW,EAAC,YAAtC;AACA,YAAA,KAAK,EAAEvB,IADP;AAEA,YAAA,QAAQ,EAAGwB,CAAD,IAAOvB,OAAO,CAACuB,CAAC,CAACE,MAAF,CAASC,KAAV;AAFxB;AAAA;AAAA;AAAA;AAAA,kBAFN;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAQI,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,OAAtB;AAAA,kCACG,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADH,eAEG,QAAC,IAAD,CAAM,OAAN;AAAc,YAAA,IAAI,EAAC,OAAnB;AAA2B,YAAA,WAAW,EAAC,aAAvC;AACA,YAAA,KAAK,EAAEzB,KADP;AAEA,YAAA,QAAQ,EAAGsB,CAAD,IAAOrB,QAAQ,CAACqB,CAAC,CAACE,MAAF,CAASC,KAAV;AAFzB;AAAA;AAAA;AAAA;AAAA,kBAFH;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,eAeM,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,UAAtB;AAAA,kCACC,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,eAEC,QAAC,IAAD,CAAM,OAAN;AAAc,YAAA,IAAI,EAAC,UAAnB;AAA8B,YAAA,WAAW,EAAC,gBAA1C;AACA,YAAA,KAAK,EAAEvB,QADP;AAEA,YAAA,QAAQ,EAAGoB,CAAD,IAAOnB,WAAW,CAACmB,CAAC,CAACE,MAAF,CAASC,KAAV;AAF5B;AAAA;AAAA;AAAA;AAAA,kBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfN,eAsBG,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,iBAAtB;AAAA,kCACI,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD,CAAM,OAAN;AAAc,YAAA,IAAI,EAAC,UAAnB;AAA8B,YAAA,WAAW,EAAC,kBAA1C;AACA,YAAA,KAAK,EAAErB,eADP;AAEA,YAAA,QAAQ,EAAGkB,CAAD,IAAOjB,kBAAkB,CAACiB,CAAC,CAACE,MAAF,CAASC,KAAV;AAFnC;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBH,eA6BG,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA7BH;AAAA;AAAA;AAAA;AAAA;AAAA,cALD;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA6CH,CApFD;;GAAM9B,a;UAOYR,W,EAEGC,W,EAIDA,W;;;KAbdO,a;AAsFN,eAAeA,aAAf","sourcesContent":["// import React, {useState, useEffect} from 'react'\r\n// import { Link } from 'react-router-dom'\r\n// import { Form, Button} from 'react-bootstrap'\r\n// import FormContainer from '../components/FormContainer'\r\n// import { useDispatch, useSelector} from 'react-redux'\r\n// import Message from '../components/Message'\r\n// import Loader from '../components/Loader'\r\n// import { getUserDetails } from '../actions/userActions'\r\n\r\n\r\n// const UserEditScreen = ({ match, history }) => {\r\n// const userId = match.params.id\r\n\r\n//  const [name, setName] = useState('')\r\n//  const [email, setEmail] = useState('')\r\n//  const [isAdmin, setIsAdmin] = useState(false)\r\n \r\n// const dispatch = useDispatch()\r\n\r\n//  const userDetails = useSelector(state => state.userDetails)\r\n//  const { loading, error, user} = userDetails\r\n\r\n// // useEffect(() => {\r\n// //        if(!user.name || user._id !== userId) {\r\n// //            dispatch(getUserDetails(userId))\r\n// //        } else {\r\n// //            setName(user.name)\r\n// //            setEmail(user.email)\r\n// //            setIsAdmin(user.isAdmin)\r\n// //        }\r\n// //    },[dispatch, user, userId])\r\n\r\n//  const submitHandler = (e) => {\r\n//      e.preventDefault()\r\n     \r\n//  }\r\n\r\n//  return (\r\n//         <>\r\n//         <Link to='/admin/userlist' className='btn btn-light my-3'>\r\n//             Go Back\r\n//         </Link>\r\n//         <FormContainer>\r\n//             <h1>Edit User</h1>\r\n//             { loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message> : (\r\n//              <Form onSubmit={submitHandler}>\r\n//               <Form.Group controlId='name'>\r\n//                     <Form.Label>Name</Form.Label>\r\n//                     <Form.Control type='name' placeholder='Enter name'\r\n//                     value={name}\r\n//                     onChange={(e) => setName(e.target.value)}></Form.Control>\r\n//                 </Form.Group>\r\n\r\n//                 <Form.Group controlId='email'>\r\n//                     <Form.Label>Email Address</Form.Label>\r\n//                     <Form.Control type='email' placeholder='Enter email'\r\n//                     value={email}\r\n//                     onChange={(e) => setEmail(e.target.value)}></Form.Control>\r\n//                 </Form.Group>\r\n\r\n//                  <Form.Group controlId='isadmin'>\r\n//                     <Form.Check type='checkbox' label='Is Admin'\r\n//                     checked={isAdmin}\r\n//                     onChange={(e) => setIsAdmin(e.target.checked)}></Form.Check>\r\n//                 </Form.Group>\r\n\r\n//                 <Button type='submit' variant='primary'>\r\n//                     Update\r\n//                 </Button>\r\n//              </Form>\r\n//             )}\r\n//             </FormContainer>\r\n//             </>\r\n//     )  \r\n    \r\n// }\r\n\r\n// export default UserEditScreen\r\n\r\nimport React, {useState, useEffect} from 'react'\r\nimport { Table, Form, Button, Col, Row} from 'react-bootstrap'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector} from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\nimport { listmyOrders } from '../actions/orderActions'\r\n\r\nconst ProfileScreen = ({ location, history }) => {\r\n const [name, setName] = useState('')\r\n const [email, setEmail] = useState('')\r\n const [password, setPassword] = useState('')\r\n const [confirmPassword, setConfirmPassword] = useState('')\r\n const [message, setMessage] = useState(null)\r\n\r\n const dispatch = useDispatch()\r\n\r\n const userDetails = useSelector(state => state.userDetails)\r\n const { loading, error, user} = userDetails\r\n console.log(userDetails)\r\n\r\n  const userLogin = useSelector(state => state.userLogin)\r\n const { userInfo } = userLogin\r\n\r\n \r\n useEffect(() => {\r\n    if(!userInfo) {\r\n        history.push('/login')\r\n    }else {\r\n        if(!user || !user.name || success) {\r\n            dispatch({\r\n                type: USER_UPDATE_PROFILE_RESET\r\n            })\r\n            dispatch(getUserDetails('profile'))\r\n            dispatch(listmyOrders())\r\n        } else {\r\n            setName(user.name)\r\n            setEmail(user.email)\r\n        }\r\n    }\r\n}, [dispatch, history])\r\n\r\n const submitHandler = (e) => {\r\n     e.preventDefault()\r\n   \r\n }\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={3}>\r\n\r\n            <h2>User Profile</h2>\r\n          \r\n            {loading && <Loader />}\r\n             <Form onSubmit={submitHandler}>\r\n              <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control type='name' placeholder='Enter name'\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                 <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control type='email' placeholder='Enter email'\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                   <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control type='password' placeholder='Enter password'\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}></Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='confirmpassword'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control type=\"password\" placeholder='Confirm password'\r\n                    value={confirmPassword}\r\n                    onChange={(e) => setConfirmPassword(e.target.value)}></Form.Control>\r\n                </Form.Group> \r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Update\r\n                </Button>  \r\n            </Form> \r\n\r\n            </Col>\r\n            \r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n"]},"metadata":{},"sourceType":"module"}